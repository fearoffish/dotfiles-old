local M = {}

M.config = function()
  -- -- Additional keybindings
  -- -- =========================================
  -- lvim.keys.insert_mode["jk"] = "<ESC>:w<CR>"
  -- lvim.keys.insert_mode["<C-s>"] = "<cmd>lua vim.lsp.buf.signature_help()<cr>"
  -- lvim.keys.normal_mode["<C-n>i"] = { "<C-i>", { noremap = true } }
  -- if lvim.builtin.fancy_bufferline.active then
  --   lvim.keys.normal_mode["<S-x>"] = ":bdelete!<CR>"
  --   lvim.keys.normal_mode["<S-l>"] = "<Cmd>BufferLineCycleNext<CR>"
  --   lvim.keys.normal_mode["<S-h>"] = "<Cmd>BufferLineCyclePrev<CR>"
  --   lvim.keys.normal_mode["[b"] = "<Cmd>BufferLineMoveNext<CR>"
  --   lvim.keys.normal_mode["]b"] = "<Cmd>BufferLineMovePrev<CR>"
  -- else
  --   lvim.keys.normal_mode["<S-x>"] = ":BufferClose<CR>"
  -- end
  -- lvim.keys.normal_mode["<esc><esc>"] = "<cmd>nohlsearch<cr>"
  -- lvim.keys.normal_mode["Y"] = "y$"
  -- lvim.keys.normal_mode["gv"] = "<cmd>vsplit | lua vim.lsp.buf.definition()<cr>"
  -- lvim.keys.visual_mode["p"] = [["_dP]]
--
  -- -- WhichKey keybindings
  -- -- =========================================
  -- if lvim.builtin.fancy_bufferline.active then
  --   lvim.builtin.which_key.mappings["b1"] = { "<Cmd>BufferLineGoToBuffer 1<CR>", "goto 1" }
  --   lvim.builtin.which_key.mappings["b2"] = { "<Cmd>BufferLineGoToBuffer 2<CR>", "goto 2" }
  --   lvim.builtin.which_key.mappings["b3"] = { "<Cmd>BufferLineGoToBuffer 3<CR>", "goto 3" }
  --   lvim.builtin.which_key.mappings["b4"] = { "<Cmd>BufferLineGoToBuffer 4<CR>", "goto 4" }
  --   lvim.builtin.which_key.mappings["b5"] = { "<Cmd>BufferLineGoToBuffer 5<CR>", "goto 5" }
  --   lvim.builtin.which_key.mappings["b6"] = { "<Cmd>BufferLineGoToBuffer 6<CR>", "goto 6" }
  --   lvim.builtin.which_key.mappings["b7"] = { "<Cmd>BufferLineGoToBuffer 7<CR>", "goto 7" }
  --   lvim.builtin.which_key.mappings["b8"] = { "<Cmd>BufferLineGoToBuffer 8<CR>", "goto 8" }
  --   lvim.builtin.which_key.mappings["b9"] = { "<Cmd>BufferLineGoToBuffer 9<CR>", "goto 9" }
  --   lvim.builtin.which_key.mappings["bc"] = { "<Cmd>BufferLinePickClose<CR>", "bufferline: delete buffer" }
  --   lvim.builtin.which_key.mappings["bp"] = { "<Cmd>BufferLinePick<CR>", "bufferline: pick buffer" }
  -- end
  -- lvim.builtin.which_key.mappings["H"] = "Help"
  -- lvim.builtin.which_key.mappings["lf"] = { "<cmd>lua vim.lsp.buf.formatting()<cr>", "Format" }
  -- lvim.builtin.which_key.mappings["lh"] = {
  --   "<cmd>hi LspReferenceRead cterm=bold ctermbg=red guibg=#24283b<cr><cmd>hi LspReferenceText cterm=bold ctermbg=red guibg=#24283b<cr><cmd>hi LspReferenceWrite cterm=bold ctermbg=red guibg=#24283b<cr>",
  --   "Clear HL",
  -- }
  -- if lvim.builtin.persistence then
  --   lvim.builtin.which_key.mappings["q"] = {
  --     name = "+Quit",
  --     d = { "<cmd>lua require('persistence').stop()<cr>", "Quit without saving session" },
  --     l = { "<cmd>lua require('persistence').load(last=true)<cr>", "Restore last session" },
  --     s = { "<cmd>lua require('persistence').load()<cr>", "Restore for current dir" },
  --   }
  -- end
  -- lvim.builtin.which_key.mappings["w"] = { "<cmd>w<CR>", "Save" }
  -- lvim.builtin.which_key.mappings["W"] = { "<cmd>w!<CR>", "Force Save" }
  -- lvim.builtin.which_key.mappings["q"] = { "<cmd>q<CR>", "Quit" }
  -- lvim.builtin.which_key.mappings["Q"] = { "<cmd>q!<CR>", "Force Quit" }
  -- lvim.builtin.which_key.mappings["f"] = { "<cmd>lua vim.lsp.buf.formatting()<cr>", "Format" }
  -- lvim.builtin.which_key.mappings["p"] = { "<cmd>lua require'telescope'.extensions.project.project{ display_type = 'full' }<cr>", "Projects" }
  -- lvim.builtin.which_key.mappings["g"]["r"] = { "<cmd>TermExec cmd='glab ci list | grep -v Showing | grep -v -e \"^$\" | head -n 1 | cut -f 2 | xargs glab ci view'<CR>", "Gitlab Runner" }
  -- lvim.builtin.which_key.mappings["b"]["F"] = { "<cmd>Telescope current_buffer_fuzzy_find<cr>", "Search Current Buffer" }
  -- lvim.builtin.which_key.mappings["s"]["f"] = {	"<cmd>Telescope find_files hidden=true<CR>", "Find File" }
  -- lvim.builtin.which_key.mappings["s"]["m"] = { "<cmd>Telescope marks<cr>", "Search Marks" }
  -- lvim.builtin.which_key.mappings["s"]["g"] = { "<cmd>Telescope git_files<cr>", "Search Git Files" }
  -- lvim.builtin.which_key.mappings["t"] = {
  --   name = "Toggle",
  --   h = { "<cmd>set hlsearch!<CR>", "Toggle Highlight" },
  --   q = { "<cmd>call QuickFixToggle()<CR>", "Toggle Quick Fix List" },
  --   b = { "<cmd>GitBlameToggle<CR>", "Toggle Git Blame" },
  --   t = { "<cmd>Twilight<CR>", "Toggle Twilight" },
  --   i = { "<cmd>IndentBlanklineToggle<CR>", "Toggle Indent Line" },
  --   x = { "<cmd>TroubleToggle<CR>", "Toggle Trouble" },
  -- }
  -- lvim.builtin.which_key.mappings["T"] = {
  --   h = { "<cmd>split term://zsh | resize 28 <cr>", "Horizontal" },
  --   v = { "<cmd>vsplit term://zsh <cr>", "Vertical" },
  -- }
  -- lvim.builtin.which_key.mappings["z"] = { "<cmd>ZenMode<CR>", "Zen Mode" }
  -- lvim.builtin.which_key.mappings["x"] = {
  --   name = "Trouble",
  --   w = { "<cmd>Trouble lsp_workspace_diagnostics<CR>", "Trouble Workspaces" },
  --   d = { "<cmd>Trouble lsp_document_diagnostics<CR>", "Trouble Document" },
  --   l = { "<cmd>Trouble loclist<CR>", "Trouble Location List" },
  --   q = { "<cmd>Trouble quickfix<CR>", "Trouble Quickfix List" },
  -- }
--
  -- -- Spectre
  -- lvim.builtin.which_key.mappings["x"] = {
  --   name = "Trouble",
  --   w = { "<cmd>Trouble lsp_workspace_diagnostics<CR>", "Trouble Workspaces" },
  --   d = { "<cmd>Trouble lsp_document_diagnostics<CR>", "Trouble Document" },
  --   l = { "<cmd>Trouble loclist<CR>", "Trouble Location List" },
  --   q = { "<cmd>Trouble quickfix<CR>", "Trouble Quickfix List" },
  -- }
end

return M
